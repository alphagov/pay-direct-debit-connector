server:
  applicationConnectors:
    - type: http
      port: ${PORT:-8080}
  adminConnectors:
    - type: http
      port: ${ADMIN_PORT:-8081}

logging:
  level: INFO
  appenders:
    - type: console
      threshold: ALL
      timeZone: UTC
      target: stdout
      logFormat: "[%d{yyyy-MM-dd HH:mm:ss.SSS}] [thread=%thread] [level=%-5level] [logger=%logger{15}] [requestID=%X{X-Request-Id:-(none)}] - %msg%n"

links:
  frontendUrl: ${FRONTEND_URL:-}

adminusers:
  adminUsersUrl: ${ADMINUSERS_URL:-}

goCardlessConnect:
  goCardlessConnectUrlTest:          ${GOCARDLESS_TEST_OAUTH_BASE_URL:-}
  goCardlessConnectUrlLive:          ${GOCARDLESS_LIVE_OAUTH_BASE_URL:-}
  goCardlessConnectClientIdTest:     ${GOCARDLESS_TEST_CLIENT_ID:-}
  goCardlessConnectClientSecretTest: ${GOCARDLESS_TEST_CLIENT_SECRET:-}
  goCardlessConnectClientIdLive:     ${GOCARDLESS_LIVE_CLIENT_ID:-}
  goCardlessConnectClientSecretLive: ${GOCARDLESS_LIVE_CLIENT_SECRET:-}

graphite:
  host: ${METRICS_HOST:-localhost}
  port: ${METRICS_PORT:-8092}

goCardless:
  # For initial integration we will use sandbox access token.
  # When in live mode: access token should be removed from the config and we should use partner integration instead.
  clientUrl: ${GDS_DIRECTDEBIT_CONNECTOR_GOCARDLESS_URL:-}
  webhookSecret: ${GDS_DIRECTDEBIT_CONNECTOR_GOCARDLESS_WEBHOOK_SECRET:-change-me}
  environment: ${GDS_DIRECTDEBIT_CONNECTOR_GOCARDLESS_ENVIRONMENT:-sandbox}

database:
  driverClass: org.postgresql.Driver
  user: ${DB_USER}
  password: ${DB_PASSWORD}
  url: jdbc:postgresql://${DB_HOST}/${DB_NAME:-directdebit_connector}?sslfactory=org.postgresql.ssl.DefaultJavaSSLFactory&${DB_SSL_OPTION}

  # the maximum amount of time to wait on an empty pool before throwing an maception
  maxWaitForConnection: 1s

  # the SQL query to run when validating a connection's liveness
  validationQuery: "SELECT '1'"

  # the timeout before a connection validation queries fail
  validationQueryTimeout: 2s

  # The initial size of the connection pool
  initialSize: 4

  # the minimum number of connections to keep open
  minSize: 4

  # the maximum number of connections to keep open
  maxSize: 8

  # whether or not idle connections should be validated
  checkConnectionWhileIdle: false

  # the amount of time to sleep between runs of the idle connection validation, abandoned cleaner and idle pool resizing
  evictionInterval: 10s

  # the minimum amount of time an connection must sit idle in the pool before it is eligible for eviction
  minIdleTime: 1 minute

jerseyClient:
  # Defines the socket timeout (SO_TIMEOUT), which is the
  # timeout for waiting for data or, put differently, a maximum period inactivity
  # between two consecutive data packets).
  timeout: 2000ms

  # Determines the timeout until a connection is established
  connectionTimeout: 2000ms

  timeToLive: 1h
  cookiesEnabled: false
  maxConnections: 1024
  maxConnectionsPerRoute: 1024
  keepAlive: 0ms
  retries: 0
  userAgent: directdebit-connector
  gzipEnabledForRequests: false

customJerseyClient:
  # Sets the read timeout to a specified timeout, in
  # milliseconds. A non-zero value specifies the timeout when
  # reading from Input stream when a connection is established to a
  # resource. If the timeout expires before there is data available
  # for read, a java.net.SocketTimeoutException is raised. A
  # timeout of zero is interpreted as an infinite timeout.
  readTimeout: 9000ms

server:
  applicationConnectors:
    - type: http
      port: ${PORT}
  adminConnectors:
    - type: http
      port: ${ADMIN_PORT}

logging:
    level: INFO
    appenders:
      - type: console
        threshold: ALL
        timeZone: UTC
        target: stdout
        logFormat: "[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %highlight(%-5level) %cyan(%logger{15}) [requestID=%X{X-Request-Id}] - %msg %n"

proxy:
  host: ${HTTP_PROXY_HOST}
  port: ${HTTP_PROXY_PORT}

links:
  frontendUrl: ${FRONTEND_URL:-}

graphite:
  host: ${METRICS_HOST:-localhost}
  port: ${METRICS_PORT:-8092}

goCardless:
  # For initial integration we will use sandbox access token.
  # When in live mode: access token should be removed from the config and we should use partner integration instead.
  accessToken: ${GDS_DIRECTDEBIT_CONNECTOR_GOCARDLESS_ACCESS_TOKEN:-}
  clientUrl: ${GDS_DIRECTDEBIT_CONNECTOR_GOCARDLESS_URL:-}
  webhookSecret: ${GDS_DIRECTDEBIT_CONNECTOR_GOCARDLESS_WEBHOOK_SECRET:-change-me}
  environment: ${GDS_DIRECTDEBIT_CONNECTOR_GOCARDLESS_ENVIRONMENT:-sandbox}

notify:
  apiKey: ${GDS_DIRECTDEBIT_CONNECTOR_NOTIFY_API_KEY:-api_key-pay-notify-service-id-pay-notify-secret-needs-to-be-32-chars-fsghdngfhmhfkrgsfs}
  mandateFailedTemplateId: ${NOTIFY_MANDATE_FAILED_EMAIL_TEMPLATE_ID}
  mandateCancelledTemplateId: ${NOTIFY_MANDATE_CANCELLED_EMAIL_TEMPLATE_ID}
  paymentConfirmedTemplateId: ${NOTIFY_PAYMENT_CONFIRMATION_EMAIL_TEMPLATE_ID}
  notificationBaseURL: ${NOTIFY_BASE_URL:-https://api.notifications.service.gov.uk}
  emailNotifyEnabled: ${NOTIFY_EMAIL_ENABLED:-false}

executorService:
  timeoutInSeconds: ${AUTH_READ_TIMEOUT_SECONDS:-1}
  threadsPerCpu: ${NUMBER_OF_THREADS_PER_CPU:-100}

database:
  driverClass: org.postgresql.Driver
  user: ${DB_USER}
  password: ${DB_PASSWORD}
  url: jdbc:postgresql://${DB_HOST}/${DB_NAME:-directdebit_connector}?sslfactory=uk.gov.pay.directdebit.app.ssl.TrustingSSLSocketFactory&${DB_SSL_OPTION}

  # the maximum amount of time to wait on an empty pool before throwing an maception
  maxWaitForConnection: 1s

  # the SQL query to run when validating a connection's liveness
  validationQuery: "SELECT '1'"

  # the timeout before a connection validation queries fail
  validationQueryTimeout: 2s

  # The initial size of the connection pool
  initialSize: 4

  # the minimum number of connections to keep open
  minSize: 4

  # the maximum number of connections to keep open
  maxSize: 8

  # whether or not idle connections should be validated
  checkConnectionWhileIdle: false

  # the amount of time to sleep between runs of the idle connection validation, abandoned cleaner and idle pool resizing
  evictionInterval: 10s

  # the minimum amount of time an connection must sit idle in the pool before it is eligible for eviction
  minIdleTime: 1 minute
